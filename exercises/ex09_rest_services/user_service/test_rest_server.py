"""
Integration tests for rest_server.
"""

import shutil
import pytest
import requests

__author__ = 'Mike Woinoski (mike@articulatedesign.us.com)'

creds = ('admin', 'adminpw')

user_ned = {
    "id": 1,
    "username": "nedf",
    "password": "nedfpw",
    "email": "ned.flanders@gmail.com",
    "first_name": "Ned",
    "middles": "Abraham",
    "last_name": "Flanders",
    "address": {
        "street": "125 Maple St",
        "post_code": "97478",
        "city": "Springfield",
        "state": "OR",
        "country": "USA",
    }
}

user_miles = {
    "username": "milesd",
    "password": "jazzlives",
    "email": "miles@jazz.com",
    "first_name": "Miles",
    "middles": None,
    "last_name": "Davis",
    "address": {
        "country": "USA",
        "street": "5311 E 1st St",
        "city": "New York",
        "post_code": "10012",
        "state": "NY"
    }
}

base_url = 'http://localhost:5000/rest/users'
test_db_input_file = 'test_db.sqlite'


def init_test_database(test_db_name):
    """ Send request to user web service to switch to test database """
    shutil.copy(f'{test_db_name}.sqlite', test_db_input_file)
    # Tell web service to switch to new database file
    url = f'{base_url}?db_file={test_db_input_file}'
    requests.patch(url, auth=creds)


def test_get_user_found():
    init_test_database('test_db_init')

    email = 'ned.flanders@gmail.com'
    url = f'{base_url}/{email}'
    http_headers = {'Accept': 'application/json'}

    r = requests.get(url, auth=creds, headers=http_headers)

    actual_result = r.json()

    print(f'GET {url} status {r.status_code}, response = {actual_result}')

    assert r.status_code == 200

    assert actual_result == {'user': user_ned}


def test_get_user_not_found():
    init_test_database('test_db_init')

    url = f'{base_url}/nobody@nowhere.com'
    headers = {'Accept': 'application/json'}

    r = requests.get(url, auth=creds, headers=headers)

    assert r.status_code == 404


def test_add_user_ok():
    init_test_database('test_db_init')

    url = base_url
    http_headers = {'Content-Type': 'application/json'}

    r = requests.post(url, auth=creds, headers=http_headers, json=user_miles)

    actual_result = r.json()

    print(f'POST {url} status {r.status_code}')
    assert r.status_code == 201

    assert actual_result['user']['id'] > 0
    del actual_result['user']['id']  # can't predict autogenerated key
    assert actual_result == {'user': user_miles}


def test_update_user_ok():
    init_test_database('test_db_with_miles')

    email = 'miles@jazz.com'
    url = f'{base_url}/{email}'
    http_headers = {'Content-Type': 'application/json'}

    expected_result = dict(user_miles)
    expected_result['middles'] = 'Dewey'
    expected_result['address']['post_code'] = '10013'

    r = requests.put(url, auth=creds, headers=http_headers,
                     json=expected_result)

    print(f'PUT {url} status {r.status_code}')
    assert r.status_code == 202

    actual_result = r.json()
    assert actual_result['user']['id'] > 0
    del actual_result['user']['id']  # can't predict autogenerated key
    assert actual_result == {'user': expected_result}


def test_delete_user_found():
    init_test_database('test_db_with_miles')

    url = f'{base_url}/miles@jazz.com'

    r = requests.delete(url, auth=creds)

    print(f'DELETE {url} status {r.status_code}')

    assert r.status_code == 204


def test_delete_user_not_found():
    init_test_database('test_db_with_miles')

    url = f'{base_url}/nobody@nowhere.com'

    r = requests.delete(url, auth=creds)

    assert r.status_code == 404


@pytest.fixture(scope='session', autouse=True)
def restore_prod_db():
    """
    Pytest will call this fixture once before any test case executes.
    If the fixture yields a value, the code after the yield will run
    after all test cases have executed.

    This is equivalent to JUnit's @BeforeAll and @AfterAll.
    """

    # Nothing to do before all tests, so we'll yield immediately
    yield None
    # Code after the yield runs after all test cases
    requests.patch(base_url, auth=creds)
